import{_ as e,o as a,c as l,Q as i}from"./chunks/framework.5018bd8e.js";const m=JSON.parse('{"title":"贡献代码","description":"","frontmatter":{},"headers":[],"relativePath":"contributing.md","filePath":"contributing.md"}'),t={name:"contributing.md"},o=i('<h1 id="贡献代码" tabindex="-1">贡献代码 <a class="header-anchor" href="#贡献代码" aria-label="Permalink to &quot;贡献代码&quot;">​</a></h1><ul><li>请抱着认真细致的态度来贡献代码。</li><li>如果只是随意试试或者测试，请在本地尝试，不要提交代码。</li></ul><h2 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h2><ul><li>分支需与版本号对应。如0.0.2版本对应0.0.2分支。</li></ul><h2 id="代码风格检测" tabindex="-1">代码风格检测 <a class="header-anchor" href="#代码风格检测" aria-label="Permalink to &quot;代码风格检测&quot;">​</a></h2><ul><li>代码必须要通过lint检测（<code>npm run lint</code>不报错）。</li><li>遇到lint报错或警告，首先应尝试解决问题，而不是添加类似<code>// eslint-disable-next-line</code>等注释来逃避问题。</li></ul><h2 id="测试用例" tabindex="-1">测试用例 <a class="header-anchor" href="#测试用例" aria-label="Permalink to &quot;测试用例&quot;">​</a></h2><ul><li>添加新方法后务必在<code>./test</code>目录下按<code>./src</code>路径下相似的相对路径添加对应的测试用例。</li><li>代码必须要通过所有测试用例（<code>npm run test</code>不报错）。</li></ul><h2 id="方法库大小" tabindex="-1">方法库大小 <a class="header-anchor" href="#方法库大小" aria-label="Permalink to &quot;方法库大小&quot;">​</a></h2><ul><li>不要随意添加会使方法库变得很大的方法。</li><li>有些第三方方法因为比较成熟，会考虑很多场景，所以方法会很大，但是平常在实际业务场景中我们并不需要考虑那么多因素，所以只需要有一个可以用的方法即可。</li></ul><h2 id="发布历史" tabindex="-1">发布历史 <a class="header-anchor" href="#发布历史" aria-label="Permalink to &quot;发布历史&quot;">​</a></h2><ul><li>做了修改后务必同步更新<code>./CHANGELOG.md</code>文件。</li><li>最新的版本记录内容放置于<code>./CHANGELOG.md</code>文件的最上方。</li></ul><h2 id="类型声明" tabindex="-1">类型声明 <a class="header-anchor" href="#类型声明" aria-label="Permalink to &quot;类型声明&quot;">​</a></h2><ul><li>务必同步更新<code>./types/utils-daily.d.ts</code>中的类型声明。</li></ul><h2 id="方法注释" tabindex="-1">方法注释 <a class="header-anchor" href="#方法注释" aria-label="Permalink to &quot;方法注释&quot;">​</a></h2><ul><li>请参考现有方法的注释进行填写。</li><li><code>@since</code>是必须写的，表示该方法从哪个版本开始可用。</li><li>添加了<code>@apiAnalyze</code>注释的方法才会生成到接口文档中。</li><li>一个文件中只可以有一个<code>@apiAnalyze</code>注释。</li></ul>',16),r=[o];function d(c,n,h,s,u,_){return a(),l("div",null,r)}const f=e(t,[["render",d]]);export{m as __pageData,f as default};
